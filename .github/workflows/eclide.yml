name: Build ECLIDE

env:
  VCPKG_BINARY_SOURCES: "clear;nuget,GitHub,read"
  VCPKG_NUGET_REPOSITORY: "https://github.com/hpcc-systems/vcpkg"

on:
  push:
    tag:
      - "sign-ct-9.4.2-*"

jobs:
  preamble:
    name: Publish Release
    runs-on: ubuntu-22.04
    permissions:
      contents: write
    outputs:
      folder_platform: ${{ steps.vars.outputs.folder_platform }}
      mount_platform: ${{ steps.vars.outputs.mount_platform }}
      folder_build: ${{ steps.vars.outputs.folder_build }}
      mount_build: ${{ steps.vars.outputs.mount_build }}
      community_ref: ${{ steps.vars.outputs.community_ref }}
      community_tag: ${{ steps.vars.outputs.community_tag }}
      eclide_tag: ${{ steps.vars.outputs.community_tag }}
      hpcc_version: ${{ steps.vars.outputs.hpcc_version }}
      candidate_base_branch: ${{ steps.vars.outputs.candidate_base_branch }}
      candidate_branch: ${{ steps.vars.outputs.candidate_branch }}
      cmake_docker_config: ${{ steps.vars.outputs.cmake_docker_config }}
      gpg_import: ${{ steps.vars.outputs.gpg_import }}
    steps:
      - name: Calculate vars
        id: vars
        run: |
          echo "folder_platform=${{ github.workspace }}/HPCC-Platform" >> $GITHUB_OUTPUT
          echo 'mount_platform=source="${{ github.workspace }}/HPCC-Platform",target=/hpcc-dev/HPCC-Platform,type=bind,consistency=cached' >> $GITHUB_OUTPUT
          echo "folder_build=${{ github.workspace }}/build" >> $GITHUB_OUTPUT
          echo 'mount_build=source="${{ github.workspace }}/build",target=/hpcc-dev/build,type=bind,consistency=cached' >> $GITHUB_OUTPUT
          community_ref=${{ github.ref }}
          echo "community_ref=$community_ref" >> $GITHUB_OUTPUT
          community_tag=$(echo $community_ref | cut -d'/' -f3)
          echo "community_tag=$community_tag" >> $GITHUB_OUTPUT
          echo "hpcc_version=$(echo $community_tag | sed 's/community_//' | sed 's/-[0-9]$//')" >> $GITHUB_OUTPUT
          community_base_ref=${{ github.event.base_ref || github.ref }}
          candidate_branch=$(echo $community_base_ref | cut -d'/' -f3)
          echo "candidate_branch=$candidate_branch" >> $GITHUB_OUTPUT
          echo "candidate_base_branch=$(echo $candidate_branch | awk -F'.' -v OFS='.' '{ $3="x"; print }')" >> $GITHUB_OUTPUT
          echo "cmake_docker_config=-DCMAKE_BUILD_TYPE=RelWithDebInfo -DVCPKG_FILES_DIR=/hpcc-dev -DCPACK_THREADS=0 -DUSE_OPTIONAL=OFF -DSIGN_MODULES=${{ github.repository_owner == 'hpcc-systems' && 'ON' || 'OFF' }}" >> $GITHUB_OUTPUT
          echo 'gpg_import=gpg --batch --import /hpcc-dev/build/private.key' >> $GITHUB_OUTPUT

      - name: Print vars
        run: |
          echo "${{ toJSON(steps.vars.outputs) }})"

      - name: Release HPCC-Platform
        uses: ncipollo/release-action@v1.12.0
        with:
          allowUpdates: true
          generateReleaseNotes: false
          prerelease: ${{ contains(github.ref, '-rc') }}

#      - name: Release ECLIDE
#          #uses: ncipollo/release-action@v1.12.0
#        with:
#          allowUpdates: true
#          generateReleaseNotes: false
#          prerelease: ${{ contains(github.ref, '-rc') }}
#          repo: ECLIDE
#          tag: ${{ steps.vars.outputs.eclide_tag }}


  build-bare-metal:
    name: Build Bare Metal
    # if: github.repository == 'hpcc-systems/HPCC-Platform'
    needs: preamble
    strategy:
      matrix:
        include:
          - os: "windows-2022"
            mono: ""
            sudo: ""
            cmake_config_options: '-A Win32 -DUSE_OPTIONAL=OFF -DCLIENTTOOLS_ONLY=ON -DUSE_AZURE=OFF -DUSE_CASSANDRA=OFF -DUSE_JAVA=OFF -DUSE_OPENLDAP=OFF -DUSE_LIBMEMCACHED=OFF -DWSSQL_SERVICE=OFF -DPKG_CONFIG_EXECUTABLE=D:/a/HPCC-Platform/HPCC-Platform/build/vcpkg_installed/x64-windows/tools/pkgconf/pkgconf.exe'
            cmake_build_options: "--config Release --parallel $NUMBER_OF_PROCESSORS"
      fail-fast: false

    runs-on: ${{ matrix.os }}
    steps:
      - name: Print vars
        shell: "bash"
        run: |
          echo ${{ matrix.os }}
          echo "${{ toJSON(needs.preamble.outputs) }})"

      - name: "Remove builtin vcpkg (old)"
        working-directory: .
        shell: "bash"
        run: |
          ${{ matrix.sudo }} rm -rf "$VCPKG_INSTALLATION_ROOT"

      - name: Checkout HPCC-Platform
        uses: actions/checkout@v3
        with:
          ref: ${{ needs.preamble.outputs.community_ref }}
          submodules: recursive
          path: ./HPCC-Platform

     #- name: "Create sinning file"
     #   shell: "bash"
     #   env:
     #     SIGN_CERT: ${{ secrets.SIGN_CERT }}
     #     SIGN_PW: ${{ secrets.SIGN_PW }}
     #   run: |
     #     mkdir -p ./sign
     #     cd sign
     #     #echo ${env:SIGN_CERT//[$'\t\r\n']} > sign_encoded.txt
     #     echo ${env:SIGN_CERT]} > sign_encoded.txt
     #     #echo ${env:SIGN_CERT//[$'\t\r\n']} | base64 --decode > hpcc_code_signing.pfx
     #     echo ${env:SIGN_CERT]} | base64 --decode > hpcc_code_signing.pfx
     #     #echo ${env:SIGN_CERT]} > hpcc_code_signing.pfx

     #     ls -l *
     #     #md5sum sign_encoded.txt
     #     md5sum hpcc_code_signing.pfx
     #     md5sum sign_encoded.txt
     #     echo ${env:SIGN_PW} > passphrase.txt
     #     #ls -l *.pfx
     #     #certutil -p ${env:SIGN_PW} -dump hpcc_code_signing.pfx


      - name: "Create sinning file"
        shell: "pwsh"
        env:
          SIGN_CERT: ${{ secrets.SIGN_CERT }}
          SIGN_PW: ${{ secrets.SIGN_PW }}
        run: |
          mkdir -p ./sign
          cd sign
          $pfxPath = "hpcc_code_signing.pfx"
          $encodedBytes = [System.Convert]::FromBase64String($env:SIGN_CERT)
          $currentDirectory = Get-Location
          $certificatePath = Join-Path -Path $currentDirectory -ChildPath $pfxPath
          [IO.File]::WriteAllBytes("$certificatePath", $encodedBytes)
      #    Set-Content $pfxPath -Value $encodedBytes -Encoding BYTE
      #    Write-Output "::set-output name=PFX_PATH::$pfxPath"
      #    CertUtil -p ${env:SIGN_PW} -dump hpcc_code_signing.pfx
          echo ${env:SIGN_PW} > passphrase.txt
      #
      - name: "Verify sinning file"
        shell: "pwsh"
        env:
          SIGN_PW: ${{ secrets.SIGN_PW }}
        run: |
          cd sign
          ls
          CertUtil -p ${env:SIGN_PW} hpcc_code_signing.pfx

      - name: "vcpkg Bootstrap"
        shell: "bash"
        run: |
          ./HPCC-Platform/vcpkg/bootstrap-vcpkg.sh

      - name: "Setup NuGet credentials"
        shell: "bash"
        run: |
          ${{ matrix.mono }} `./HPCC-Platform/vcpkg/vcpkg fetch nuget | tail -n 1` \
            sources add \
            -name "GitHub" \
            -source "https://nuget.pkg.github.com/hpcc-systems/index.json" \
            -storepasswordincleartext \
            -username "${{ github.repository_owner }}" \
            -password "${{ secrets.GITHUB_TOKEN }}"

      - name: CMake Packages
        shell: "bash"
        env:
          SIGN_PW: ${{ secrets.SIGN_PW }}
        run: |
          mkdir -p ./build
          cmake -S ./HPCC-Platform -B ./build ${{ matrix.cmake_config_options }}  -DSIGN_DIRECTORY=./sign
          cmake --build ./build ${{ matrix.cmake_build_options }} --target package
          #cmake --build ./build ${{ matrix.cmake_build_options }} --target SIGN
          "C:\Program Files (x86)\Microsoft SDKs\ClickOnce\SignTool\signtool.exe" sign /f ../sign/hpcc_code_signing.pfx /p ${env:SIGN_PW} /t http://timestamp.digicert.com /fd SHA256 hpccsystems-clienttools*.exe
          #PFX_PASSWORD

      - name: Upload Assets
        uses: ncipollo/release-action@v1.12.0
        with:
          allowUpdates: true
          generateReleaseNotes: false
          prerelease: ${{ contains(github.ref, '-rc') }}
          artifacts: "./build/*.exe,./build/*.msi,./build/*.dmg,./build/*.pkg,./build/*.tar.gz"

      - name: Upload error logs
        if: ${{ failure() || cancelled() }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.os }}-logs
          path: ./build/**/*.log
